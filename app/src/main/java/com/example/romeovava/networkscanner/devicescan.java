package com.example.romeovava.networkscanner;


import android.annotation.SuppressLint;
import android.app.ActionBar;
import android.app.Fragment;
import android.content.Context;
import android.graphics.Color;
import android.net.wifi.WifiInfo;
import android.net.wifi.WifiManager;
import android.os.AsyncTask;
import android.os.Bundle;
import android.support.annotation.Nullable;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.support.v7.widget.Toolbar;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.RelativeLayout;
import android.widget.TextView;

import com.stealthcopter.networktools.Ping;
import com.stealthcopter.networktools.SubnetDevices;
import com.stealthcopter.networktools.ping.PingResult;
import com.stealthcopter.networktools.ping.PingStats;
import com.stealthcopter.networktools.subnet.Device;

import org.nmap4j.core.nmap.ExecutionResults;
import org.nmap4j.core.nmap.NMapExecutionException;
import org.nmap4j.core.nmap.NMapInitializationException;
import org.nmap4j.core.scans.ServiceDiscovery;
import org.nmap4j.data.NMapRun;

import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.FormatFlagsConversionMismatchException;
import java.util.Formatter;
import java.util.List;

import cn.pedant.SweetAlert.SweetAlertDialog;
import okhttp3.OkHttpClient;
/**
 * Created by Romeo VaVa on 11/2/2018.
 *
 */
public class devicescan extends android.support.v4.app.Fragment implements RecyclerItemTouchHelper_device.RecyclerItemTouchHelperListener {
    private RecyclerView recyclerView;
    private static final String TAG = "Devoce" ;
    private OkHttpClient okhttp=new OkHttpClient();
    private List<content_device> cartList;
    Task task=new Task();
    String token;
    private device_listadapter mAdapter;
    UserLocalDatabase database;
    RelativeLayout cl;
    WifiManager wm;
    WifiInfo wi;
    final List<content_device> list=new ArrayList<>();
    SweetAlertDialog pDialog;
    User user_profile;

    @Nullable
    @Override
    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, Bundle savedInstanceState) {
        View rootView = inflater.inflate(R.layout.devicescan, container, false);
        database = new UserLocalDatabase(getActivity());
        user_profile= database.getUserData();
        recyclerView = rootView.findViewById(R.id.recycler_view);
        cartList = new ArrayList<>();
        mAdapter = new device_listadapter(getActivity(), cartList);
        RecyclerView.LayoutManager layoutmanager = new LinearLayoutManager(getActivity().getApplicationContext());
        recyclerView.setLayoutManager(layoutmanager);
        recyclerView.setAdapter(mAdapter);
        wm= (WifiManager) getActivity().getApplicationContext().getSystemService(Context.WIFI_SERVICE);
        wi = wm.getConnectionInfo();
        pDialog = new SweetAlertDialog( getActivity(), SweetAlertDialog.PROGRESS_TYPE);
        pDialog.getProgressHelper().setBarColor(Color.parseColor("#A5DC86"));
        pDialog.setTitleText("Loading");
        pDialog.setCancelable(false);
        pDialog.show();
        cartList.clear();
        findSubnetDevices();
        return rootView;
    }


    private void findSubnetDevices( ){
        abc a=new abc();
        a.execute();
    }
    @Override
    public void onSwiped(RecyclerView.ViewHolder viewHolder, int direction, int position) {

    }
    private static String getIpAddress(WifiInfo wifiInfo) {
        String result;
        int ip = wifiInfo.getIpAddress();

        result = String.format("%d.%d.%d.%d", (ip & 0xff), (ip >> 8 & 0xff), (ip >> 16 & 0xff),
                (ip >> 24 & 0xff));

        return result;
    }


    @SuppressLint("StaticFieldLeak")
    public class abc extends AsyncTask<Void,Void,String>{

        @Override
        protected String doInBackground(Void... voids) {
            String ipaddress =getIpAddress(wi);
            String get_ip;
            List<String> ip =new ArrayList<>();
            int count=0;
            InetAddress addr = null;
            ipaddress= ipaddress.substring(0,ipaddress.length()-1);
            while(!ipaddress.substring(ipaddress.length()-1).equals(".")){
                ipaddress= ipaddress.substring(0,ipaddress.length()-1);
            }
            Nmap4j nmap4j = new Nmap4j( "/system/bin/nmap2" ) ;
            nmap4j.includeHosts( "-sP "+ipaddress+"0-255" );
            try {
                nmap4j.execute();
                if( !nmap4j.hasError() ) {
                    String result=nmap4j.getOutput();
                    Log.d("gg",result);
                    while(result.contains("Nmap scan report for ")){
                        result=result.substring(result.indexOf("Nmap scan report for ")+21,result.length()-1);
                        get_ip=result.substring(0,result.indexOf("\n"));
                        ip.add(count,get_ip);
                        count+=1;
                    }
                } else {
                    Log.d("asd",nmap4j.getExecutionResults().getErrors());
                }
            } catch (NMapInitializationException e) {
                e.printStackTrace();
            } catch (NMapExecutionException e) {
                e.printStackTrace();
            }
            try {
                for(int a=0;a<ip.size();a++){
                    addr = InetAddress.getByName(ip.get(a));
                    Log.d("aaa",ip.get(a));
                    String host = addr.getHostName();
                    Log.d("aaa",host);
                    cartList.add(new content_device(ip.get(a),host));
                    getActivity().runOnUiThread(new Runnable() {
                        @Override
                        public void run() {
                            mAdapter.notifyDataSetChanged();
                            pDialog.dismissWithAnimation();
                        }
                    });
                }
            } catch (UnknownHostException e) {
                e.printStackTrace();
            }

            return null;
        }
    }

}