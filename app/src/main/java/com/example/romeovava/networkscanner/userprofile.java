package com.example.romeovava.networkscanner;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.Dialog;
import android.app.Fragment;
import android.content.Context;
import android.content.Intent;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Build;
import android.os.Bundle;
import android.os.Environment;
import android.provider.MediaStore;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.annotation.RequiresApi;
import android.support.design.widget.NavigationView;
import android.support.v4.view.GravityCompat;
import android.support.v4.widget.DrawerLayout;
import android.support.v7.app.ActionBar;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.DefaultItemAnimator;
import android.support.v7.widget.DividerItemDecoration;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.support.v7.widget.Toolbar;
import android.support.v7.widget.helper.ItemTouchHelper;
import android.text.InputType;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.RelativeLayout;
import android.widget.TextView;

import com.afollestad.materialdialogs.MaterialDialog;
import com.squareup.picasso.Picasso;
import com.yarolegovich.lovelydialog.LovelyTextInputDialog;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import de.hdodenhof.circleimageview.CircleImageView;
import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

/**
 * Created by Romeo VaVa on 11/2/2018.
 *
 */
public class userprofile extends android.support.v4.app.Fragment implements RecyclerItemTouchHelper.RecyclerItemTouchHelperListener,View.OnClickListener {
    private RecyclerView recyclerView;
    private static final String TAG = "Home_Page" ;
    private OkHttpClient okhttp=new OkHttpClient();
    String mail;
    User user_profile;
    Uri fileUri;
    CircleImageView civ;
    TextView email,name;
    String  token;Uri file;
    String value;
    String realpath;
    Toolbar toolbar;
    RelativeLayout cl;
    private List<content_profile> cartList;
    Task task=new Task();
    private profile_listadapter mAdapter;
    DrawerLayout mDrawerLayout;
    UserLocalDatabase database;

    public userprofile(){

    }
    @Nullable
    @Override
    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, Bundle savedInstanceState) {
        View rootView = inflater.inflate(R.layout.userprofile, container, false);
        email=rootView.findViewById(R.id.email);
        name=rootView.findViewById(R.id.name);
        civ=rootView.findViewById(R.id.profile_image);
        mDrawerLayout = rootView.findViewById(R.id.drawer_layout);
        database=new UserLocalDatabase(getActivity().getApplicationContext());
        recyclerView = rootView.findViewById(R.id.recycler_view);
        cl=rootView.findViewById(R.id.cl);
        civ.setOnClickListener(this);
        //create a content_profile list
        cartList = new ArrayList<>();
        //create a profile lisst adapter object
        mAdapter = new profile_listadapter(getActivity().getApplicationContext(), cartList);
        //layoutmanager - responsible to measure the layout
        RecyclerView.LayoutManager layoutmanager=new LinearLayoutManager(getActivity().getApplicationContext());
        //set the layout
        recyclerView.setLayoutManager(layoutmanager);
        //set the animation
        recyclerView.setItemAnimator(new DefaultItemAnimator());
        //add a special drawing layout
        recyclerView.addItemDecoration(new DividerItemDecoration(getActivity().getApplicationContext(), DividerItemDecoration.VERTICAL));
        //set the adapter to recycle view
        recyclerView.setAdapter(mAdapter);
        ItemTouchHelper.SimpleCallback itemTouchHelperCallback = new RecyclerItemTouchHelper(0, ItemTouchHelper.LEFT, this);
        //attach the interaction to the recycleview
        new ItemTouchHelper(itemTouchHelperCallback).attachToRecyclerView(recyclerView);
        //clear the cartlist first
        cartList.clear();
        create_list();
        if(!(user_profile.image_url.equals(""))){

            Log.d("zzz",user_profile.image_url);
            Picasso.with(getActivity().getApplicationContext()).load("http://172.20.10.2/user_profile/image?image="+user_profile.image_url).fit().into(civ);

        }
        return rootView;
    }


    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
            Log.d("asd",""+item.getItemId());
        return super.onOptionsItemSelected(item);
    }

    private void create_list() {
        List<content_profile> list=new ArrayList<>();
        user_profile= database.getUserData();
        email.setText(user_profile.email);
        name.setText(user_profile.name);
        list.add(new content_profile("Name",user_profile.name));
        if(user_profile.education.equals("")){
            list.add(new content_profile("Education","None"));
        }else{
            list.add(new content_profile("Education",user_profile.education));
        }
        if(user_profile.country.equals("")){
            list.add(new content_profile("Country","None"));
        }else{
            list.add(new content_profile("Country",user_profile.country));
        }
        list.add(new content_profile("Password",""));
        //add the list to
        cartList.addAll(list);
        //refreshing recycle view
        mAdapter.notifyDataSetChanged();
    }

    @Override
    public void onStart() {
        super.onStart();
        if(authenticate()){
        }else{
            database.clearUserData();
            Intent intent=new Intent(getActivity(), MainActivity.class);
            startActivity(intent);
        }
    }

    private boolean authenticate() {
        return database.getUserLoggedIn();
    }

    @Override
    public void onSwiped(RecyclerView.ViewHolder viewHolder, int direction, int position) {
        if (viewHolder instanceof profile_listadapter.viewholder) {
            if(position==0){
                dialog(0,"Name","Enter the name that you want to change","Name is too short");
            }else if(position==1){
                dialog(1,"Education","Enter your education where had you been","Name is too short");
            }else if(position==2){
                dialog(2,"Country","Where you come from?","Enter a valid country name");
            }else if(position==3){
                dialog(3,"Password","Enter your current password","Enter a password");
            }
            mAdapter.notifyDataSetChanged();
        }
    }

    public void dialog(int position,String title,String message,String input_filter){
        if(position==0){
           LovelyTextInputDialog a= new LovelyTextInputDialog(getActivity())
                    .setTopColorRes(R.color.green_dialog)
                    .setTitle(title)
                    .setMessage(message)
                    .setIcon(R.drawable.ic_edit)
                    .setInputFilter(input_filter, new LovelyTextInputDialog.TextFilter() {
                        @Override
                        public boolean check(String text) {
                            if(text.length()>5){
                                mAdapter.notifyDataSetChanged();
                                return true;
                            }else{
                                return false;
                            }
                        }
                    }).setNegativeButton(android.R.string.no,null)
                    .setConfirmButton(android.R.string.ok, new LovelyTextInputDialog.OnTextInputConfirmListener() {
                        @Override
                        public void onTextInputConfirmed(String text) {
                            value=text;
                            Change_name cn=new Change_name();
                            cn.execute();
                        }
                    });
           a.show();
        }else if(position==1){
            new LovelyTextInputDialog(getActivity())
                    .setTopColorRes(R.color.green_dialog)
                    .setTitle(title)
                    .setMessage(message)
                    .setIcon(R.drawable.ic_edit)
                    .setInputFilter(input_filter, new LovelyTextInputDialog.TextFilter() {
                        @Override
                        public boolean check(String text) {
                            if (text.length() > 5) {
                                mAdapter.notifyDataSetChanged();
                                return true;
                            } else {
                                return false;
                            }
                        }
                    }).setNegativeButton(android.R.string.no, null)
                    .setConfirmButton(android.R.string.ok, new LovelyTextInputDialog.OnTextInputConfirmListener() {
                        @Override
                        public void onTextInputConfirmed(String text) {
                            value = text;
                            Change_education co = new Change_education();
                            co.execute();
                        }
                    })
                    .show();
        }else if(position==2){
            new LovelyTextInputDialog(getActivity())
                    .setTopColorRes(R.color.green_dialog)
                    .setTitle(title)
                    .setMessage(message)
                    .setIcon(R.drawable.ic_edit)
                    .setInputFilter(input_filter, new LovelyTextInputDialog.TextFilter() {
                        @RequiresApi(api = Build.VERSION_CODES.KITKAT)
                        @Override
                        public boolean check(String text) {
                            JSONArray jo;
                            try {
                                InputStream is=getActivity().getAssets().open("json/country.json");
                                int size=is.available();
                                byte[] buffer=new byte[size];
                                is.read(buffer);
                                is.close();
                                String json=new String(buffer,"UTF-8");
                                jo=new JSONArray(json);
                                for(int a=0;a<jo.length();a++){
                                    JSONObject response =jo.getJSONObject(a);
                                    if(response.getString("name").toLowerCase().equals(text)){
                                        value=text;
                                        mAdapter.notifyDataSetChanged();
                                        return true;
                                    }
                                }
                            } catch (IOException e) {
                                e.printStackTrace();
                            } catch (JSONException e) {
                                e.printStackTrace();
                            }
                            return false;
                        }
                    }).setNegativeButton(android.R.string.no,null)
                    .setConfirmButton(android.R.string.ok, new LovelyTextInputDialog.OnTextInputConfirmListener() {
                        @Override
                        public void onTextInputConfirmed(String text) {
                            Change_country cc=new Change_country();
                            cc.execute();
                        }
                    }).show();
        }else if(position==3){
            new LovelyTextInputDialog(getActivity())
                    .setTopColorRes(R.color.green_dialog)
                    .setTitle(title)
                    .setMessage(message)
                    .setIcon(R.drawable.ic_edit)
                    .setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_PASSWORD)
                    .setInputFilter(input_filter, new LovelyTextInputDialog.TextFilter() {
                        @Override
                        public boolean check(String text) {
                            if(text.length()!=0){
                                return true;
                            }else{
                                return false;
                            }
                        }
                    }).setNegativeButton(android.R.string.no,null)
                    .setConfirmButton(android.R.string.ok, new LovelyTextInputDialog.OnTextInputConfirmListener() {
                        @Override
                        public void onTextInputConfirmed(String text) {
                            value=text;
                            check_password cp=new check_password();
                            cp.execute();
                        }
                    })
                    .show();
        }
    }

//    @Override
//    public boolean onCreateOptionsMenu(Menu menu) {
//        getMenuInflater().inflate(R.menu.menu_main, menu);
//        return super.onCreateOptionsMenu(menu);
//    }

    @Override
    public void onClick(View view) {
        if(view.getId()==R.id.profile_image){
            new MaterialDialog.Builder(getActivity()).title("Change Profile Picture").items(new String[]{"Take picture", "Choose from library"})
                    .itemsCallbackSingleChoice(-1, new MaterialDialog.ListCallbackSingleChoice() {
                        @Override
                        public boolean onSelection(MaterialDialog dialog, View itemView, int which, CharSequence text) {
                           if(which==0){
                               Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
                               file = Uri.fromFile(getOutputMediaFile());
                               intent.putExtra("asd", file.getPath());
                               startActivityForResult(intent, 100);
                               return true;
                           }else{
                               //The content:// style URI for the "primary" external storage volume.
                               Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
                               intent.setType("image/*");
                               startActivityForResult(intent, 100);
                               return true;
                           }

                        }
                    }).show();
        }

    }


    private static File getOutputMediaFile(){
        File mediaStorageDir = new File(Environment.getExternalStoragePublicDirectory(
                Environment.DIRECTORY_PICTURES), "CameraDemo");

        if (!mediaStorageDir.exists()){
            if (!mediaStorageDir.mkdirs()){
                return null;
            }
        }

        String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss").format(new Date());
        return new File(mediaStorageDir.getPath() + File.separator +
                "IMG_"+ timeStamp +".jpg");
    }

    @Override
    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        Log.d("asd","asd");
        if(requestCode==100){
            if(resultCode== Activity.RESULT_OK){
                realpath="file://"+RealPathUtil.getRealPathFromURI_API11to18(getActivity().getApplicationContext(),data.getData());
                Change_pic cp=new Change_pic();
                cp.execute();
            }
        }else if(requestCode==1){
            if(resultCode==Activity.RESULT_OK) {
                if (Build.VERSION.SDK_INT < 19){
                    realpath = RealPathUtil.getRealPathFromURI_API11to18(getActivity().getApplicationContext(), data.getData());
                }else{
                    realpath = RealPathUtil.getRealPathFromURI_API19(getActivity().getApplicationContext(), data.getData());
                }
                Change_pic cp=new Change_pic();
                cp.execute();
            }
        }
    }

    @SuppressLint("StaticFieldLeak")
    private class Change_name extends AsyncTask<Void,Void,String> {
        @Override
        protected String doInBackground(Void... voids) {
            String url="http://172.20.10.2/user_profile/name";
            String[] data=new String[3];
            String[] data_type=new String[3];
            data_type[0]="name";
            data_type[1]="email";
            data_type[2]="token";
            data[0]=value;
            data[1]=user_profile.email;
            data[2]=user_profile.token;
            try {
                String json=task.model(data,data_type);
                Request request=task.post(url,json);
                okhttp.newCall(request).enqueue(new Callback() {
                    @Override
                    public void onFailure(@NonNull Call call, @NonNull IOException e) {
                    }

                    @Override
                    public void onResponse(@NonNull Call call, @NonNull Response response) throws IOException {
                        try {
                            if(response.isSuccessful()){
                                String message=response.body().string();
                                JSONObject result=new JSONObject(message);
                                String jsonResult=result.getString("Response");
                                Log.d(TAG,jsonResult);
                                if(jsonResult.equals("Update Succesfully")){
                                    JSONArray items = result.getJSONArray("User");
                                    JSONObject user=items.getJSONObject(0);
                                    mail=user.getString("name");
                                    token=user.getString("token");
                                    task.snackbar_pass2(cl,"Update Success name "+mail);
                                    database.storeName(mail);
                                    if(!(token.equals(user_profile.token))){
                                        database.storeToken(token);
                                    }
                                    getActivity().runOnUiThread(new Runnable() {
                                        @Override
                                        public void run() {
                                            user_profile=database.getUserData();
                                            name.setText(mail);
                                            cartList.set(0,new content_profile("Name",mail));
                                            mAdapter.notifyDataSetChanged();

                                        }
                                    });
                                }else if(jsonResult.equals("Update Fail")){
                                    task.snackbar(cl,"Update Fail");
                                }else if(jsonResult.equals("Something went wrong!")){
                                    task.snackbar(cl,"Something went wrong!");
                                }else if(jsonResult.equals("Token Invalid")){
                                    task.snackbar(cl,"Token Invalid");
                                }else if(jsonResult.equals("Email Invalid")){
                                    task.snackbar(cl,"Email Invalid");
                                }
                            }
                        } catch (JSONException e) {
                            e.printStackTrace();
                        }
                    }
                });
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return null;
        }
    }

    @SuppressLint("StaticFieldLeak")
    private class Change_pic extends AsyncTask<Void,Void,String> {
        @Override
        protected String doInBackground(Void... voids) {
            String url="http://172.20.10.2/user_profile/picture";
            Request request=task.post_image(url,user_profile.email,user_profile.token,realpath);
            okhttp.newCall(request).enqueue(new Callback() {
                @Override
                public void onFailure(@NonNull Call call, @NonNull IOException e) {
                }

                @Override
                public void onResponse(@NonNull Call call, @NonNull Response response) throws IOException {
                    try {
                        if(response.isSuccessful()){
                            String message=response.body().string();
                            JSONObject result=new JSONObject(message);
                            String jsonResult=result.getString("Response");
                            if(jsonResult.equals("Update Succesfully")){
                                JSONArray items = result.getJSONArray("User");
                                JSONObject user=items.getJSONObject(0);
                                mail=user.getString("img_url");
                                token=user.getString("token");
                                task.snackbar_pass2(cl,"Update Success ");
                                database.storeImage(mail);
                                if(!(token.equals(user_profile.token))){
                                    database.storeToken(token);
                                    user_profile=database.getUserData();
                                }
                                if(realpath.contains("file://")){
                                   getActivity().runOnUiThread(new Runnable() {
                                        @Override
                                        public void run() {
                                            Picasso.with(getActivity().getApplicationContext()).load(realpath).fit().into(civ);
                                        }
                                    });
                                }else{
                                    getActivity().runOnUiThread(new Runnable() {
                                        @Override
                                        public void run() {
                                            Picasso.with(getActivity().getApplicationContext()).load(new File(realpath)).fit().into(civ);
                                        }
                                    });
                                }
                            }else if(jsonResult.equals("Update Fail")){
                                task.snackbar(cl,"Update Fail");
                            }else if(jsonResult.equals("Something went wrong!")){
                                task.snackbar(cl,"Something went wrong!");
                            }else if(jsonResult.equals("Token Invalid")){
                                task.snackbar(cl,"Token Invalid");
                            }else if(jsonResult.equals("Email Invalid")){
                                task.snackbar(cl,"Email Invalid");
                            }
                        }
                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                }
            });
            return null;
        }
    }

    @SuppressLint("StaticFieldLeak")
    private class check_password extends AsyncTask<Void,Void,String> {
        @Override
        protected String doInBackground(Void... voids) {
            String url="http://172.20.10.2/user_profile/check_password";
            String[] data=new String[3];
            String[] data_type=new String[3];
            data_type[0]="password";
            data_type[1]="email";
            data_type[2]="token";
            data[0]=value;
            data[1]=user_profile.email;
            data[2]=user_profile.token;
            try {
                String json=task.model(data,data_type);
                Request request=task.post(url,json);
                okhttp.newCall(request).enqueue(new Callback() {
                    @Override
                    public void onFailure(@NonNull Call call, @NonNull IOException e) {
                    }

                    @Override
                    public void onResponse(@NonNull Call call, @NonNull Response response) throws IOException {
                        try {
                            if(response.isSuccessful()){
                                String message=response.body().string();
                                JSONObject result=new JSONObject(message);
                                String jsonResult=result.getString("Response");
                                if(jsonResult.equals("True")){
                                    token=result.getString("token");
                                    if(!(token.equals(user_profile.token))){
                                        database.storeToken(token);
                                    }
                                    getActivity().runOnUiThread(new Runnable() {
                                        @Override
                                        public void run() {
                                            new LovelyTextInputDialog(getActivity())
                                                    .setTopColorRes(R.color.green_dialog)
                                                    .setTitle("Password")
                                                    .setMessage("Enter the password that you want to change")
                                                    .setIcon(R.drawable.ic_edit)
                                                    .setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_PASSWORD)
                                                    .setInputFilter("Enter a password", new LovelyTextInputDialog.TextFilter() {
                                                        @Override
                                                        public boolean check(String text) {
                                                            if(text.length()>5){
                                                                return true;
                                                            }else{
                                                                return false;
                                                            }
                                                        }
                                                    }).setNegativeButton(android.R.string.no,null)
                                                    .setConfirmButton(android.R.string.ok, new LovelyTextInputDialog.OnTextInputConfirmListener() {
                                                        @Override
                                                        public void onTextInputConfirmed(String text) {
                                                            value=text;
                                                            new LovelyTextInputDialog(getActivity())
                                                                    .setTopColorRes(R.color.green_dialog)
                                                                    .setTitle("Password")
                                                                    .setMessage("Recomfirm the password")
                                                                    .setIcon(R.drawable.ic_edit)
                                                                    .setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_PASSWORD)
                                                                    .setInputFilter("Password Incorrect", new LovelyTextInputDialog.TextFilter() {
                                                                        @Override
                                                                        public boolean check(String text) {
                                                                            if(value.equals(text)){
                                                                                return true;
                                                                            }else{
                                                                                return false;
                                                                            }
                                                                        }
                                                                    }).setNegativeButton(android.R.string.no,null)
                                                                    .setConfirmButton(android.R.string.ok, new LovelyTextInputDialog.OnTextInputConfirmListener() {
                                                                        @Override
                                                                        public void onTextInputConfirmed(String text) {
                                                                            value=text;
                                                                            Change_password cp=new Change_password();
                                                                            cp.execute();

                                                                        }
                                                                    })
                                                                    .show();
                                                        }
                                                    })
                                                    .show();
                                        }
                                    });
                                }else if(jsonResult.equals("Update Fail")){
                                    task.snackbar(cl,"Update Fail");
                                }else if(jsonResult.equals("Something went wrong!")){
                                    task.snackbar(cl,"Something went wrong!");
                                }else if(jsonResult.equals("Token Invalid")){
                                    task.snackbar(cl,"Token Invalid");
                                }else if(jsonResult.equals("Email Invalid")){
                                    task.snackbar(cl,"Email Invalid");
                                }else if(jsonResult.equals("Password Incorrect")){
                                    task.snackbar(cl,"Password Incorrect");
                                }
                            }
                        } catch (JSONException e) {
                            e.printStackTrace();
                        }
                    }
                });
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return null;
        }
    }

    @SuppressLint("StaticFieldLeak")
    private class Change_education extends AsyncTask<Void,Void,String> {
        @Override
        protected String doInBackground(Void... voids) {
            String url="http://172.20.10.2/user_profile/education";
            String[] data=new String[3];
            String[] data_type=new String[3];
            data_type[0]="education";
            data_type[1]="email";
            data_type[2]="token";
            data[0]=value;
            data[1]=user_profile.email;
            data[2]=user_profile.token;
            try {
                String json=task.model(data,data_type);
                Request request=task.post(url,json);
                okhttp.newCall(request).enqueue(new Callback() {
                    @Override
                    public void onFailure(@NonNull Call call, @NonNull IOException e) {
                    }

                    @Override
                    public void onResponse(@NonNull Call call, @NonNull Response response) throws IOException {
                        try {
                            if(response.isSuccessful()){
                                String message=response.body().string();
                                JSONObject result=new JSONObject(message);
                                String jsonResult=result.getString("Response");
                                Log.d(TAG,jsonResult);
                                if(jsonResult.equals("Update Succesfully")){
                                    JSONArray items = result.getJSONArray("User");
                                    JSONObject user=items.getJSONObject(0);
                                    mail=user.getString("education");
                                    token=user.getString("token");
                                    task.snackbar_pass2(cl,"Update Success education "+mail);
                                    database.storeEducation(mail);
                                    if(!(token.equals(user_profile.token))){
                                        database.storeToken(token);
                                    }
                                    getActivity().runOnUiThread(new Runnable() {
                                        @Override
                                        public void run() {
                                            user_profile=database.getUserData();
                                            cartList.set(1,new content_profile("Education",mail));
                                            mAdapter.notifyDataSetChanged();

                                        }
                                    });
                                }else if(jsonResult.equals("Update Fail")){
                                    task.snackbar(cl,"Update Fail");
                                }else if(jsonResult.equals("Something went wrong!")){
                                    task.snackbar(cl,"Something went wrong!");
                                }else if(jsonResult.equals("Token Invalid")){
                                    task.snackbar(cl,"Token Invalid");
                                }else if(jsonResult.equals("Email Invalid")){
                                    task.snackbar(cl,"Email Invalid");
                                }
                            }
                        } catch (JSONException e) {
                            e.printStackTrace();
                        }
                    }
                });
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return null;
        }
    }

    @SuppressLint("StaticFieldLeak")
    private class Change_password extends AsyncTask<Void,Void,String> {
        @Override
        protected String doInBackground(Void... voids) {
            String url="http://172.20.10.2/user_profile/password";
            String[] data=new String[3];
            String[] data_type=new String[3];
            data_type[0]="password";
            data_type[1]="email";
            data_type[2]="token";
            data[0]=value;
            data[1]=user_profile.email;
            data[2]=user_profile.token;
            try {
                String json=task.model(data,data_type);
                Request request=task.post(url,json);
                okhttp.newCall(request).enqueue(new Callback() {
                    @Override
                    public void onFailure(@NonNull Call call, @NonNull IOException e) {
                    }

                    @Override
                    public void onResponse(@NonNull Call call, @NonNull Response response) throws IOException {
                        try {
                            if(response.isSuccessful()){
                                String message=response.body().string();
                                JSONObject result=new JSONObject(message);
                                String jsonResult=result.getString("Response");
                                if(jsonResult.equals("Update Succesfully")){
                                    String token=result.getString("token");
                                    task.snackbar_pass2(cl,"Password update successfully ");
                                    if(!(token.equals(user_profile.token))){
                                        database.storeToken(token);
                                    }
                                }else if(jsonResult.equals("Update Fail")){
                                    task.snackbar(cl,"Update Fail");
                                }else if(jsonResult.equals("Something went wrong!")){
                                    task.snackbar(cl,"Something went wrong!");
                                }else if(jsonResult.equals("Token Invalid")){
                                    task.snackbar(cl,"Token Invalid");
                                }else if(jsonResult.equals("Email Invalid")){
                                    task.snackbar(cl,"Email Invalid");
                                }
                            }
                        } catch (JSONException e) {
                            e.printStackTrace();
                        }
                    }
                });
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return null;
        }
    }

    @SuppressLint("StaticFieldLeak")
    private class Change_country extends AsyncTask<Void,Void,String> {
        @Override
        protected String doInBackground(Void... voids) {
            String url="http://172.20.10.2/user_profile/country";
            String[] data=new String[3];
            String[] data_type=new String[3];
            data_type[0]="country";
            data_type[1]="email";
            data_type[2]="token";
            data[0]=value;
            data[1]=user_profile.email;
            data[2]=user_profile.token;
            try {
                String json=task.model(data,data_type);
                Request request=task.post(url,json);
                okhttp.newCall(request).enqueue(new Callback() {
                    @Override
                    public void onFailure(@NonNull Call call, @NonNull IOException e) {
                    }

                    @Override
                    public void onResponse(@NonNull Call call, @NonNull Response response) throws IOException {
                        try {
                            if(response.isSuccessful()){
                                String message=response.body().string();
                                JSONObject result=new JSONObject(message);
                                String jsonResult=result.getString("Response");
                                Log.d(TAG,jsonResult);
                                if(jsonResult.equals("Update Succesfully")){
                                    JSONArray items = result.getJSONArray("User");
                                    JSONObject user=items.getJSONObject(0);
                                    mail=user.getString("country");
                                    token=user.getString("token");
                                    task.snackbar_pass2(cl,"Update Success country "+mail);
                                    database.storeCountry(mail);
                                    if(!(token.equals(user_profile.token))){
                                        database.storeToken(token);
                                    }
                                    getActivity().runOnUiThread(new Runnable() {
                                        @Override
                                        public void run() {
                                            user_profile=database.getUserData();
                                            cartList.set(2,new content_profile("Country",mail));
                                            mAdapter.notifyDataSetChanged();

                                        }
                                    });
                                }else if(jsonResult.equals("Update Fail")){
                                    task.snackbar(cl,"Update Fail");
                                }else if(jsonResult.equals("Something went wrong!")){
                                    task.snackbar(cl,"Something went wrong!");
                                }else if(jsonResult.equals("Token Invalid")){
                                    task.snackbar(cl,"Token Invalid");
                                }else if(jsonResult.equals("Email Invalid")){
                                    task.snackbar(cl,"Email Invalid");
                                }
                            }
                        } catch (JSONException e) {
                            e.printStackTrace();
                        }
                    }
                });
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return null;
        }
    }


    @SuppressLint("StaticFieldLeak")
    private class At3 extends AsyncTask<Void,Void,String> {
        @Override
        protected String doInBackground(Void... voids) {
            String url="http://172.20.10.2/user_profile/password";
            String[] data=new String[4];
            String[] data_type=new String[4];
            data_type[0]="password";
            data_type[1]="email";
            data_type[2]="token";
            data_type[3]="password_check";
            data[0]=value;
            data[1]=user_profile.email;
            data[2]=user_profile.token;
            data[3]=value;
            try {
                String json=task.model(data,data_type);
                Request request=task.post(url,json);
                okhttp.newCall(request).enqueue(new Callback() {
                    @Override
                    public void onFailure(@NonNull Call call, @NonNull IOException e) {
                    }

                    @Override
                    public void onResponse(@NonNull Call call, @NonNull Response response) throws IOException {
                        try {
                            if(response.isSuccessful()){
                                String message=response.body().string();
                                JSONObject result=new JSONObject(message);
                                String jsonResult=result.getString("Response");
                                Log.d(TAG,jsonResult);
                                if(jsonResult.equals("Update Succesfully")){
                                    task.snackbar_pass2(cl,"Update Success password");
                                    getActivity().runOnUiThread(new Runnable() {
                                        @Override
                                        public void run() {
//                                            editText7.setText("");
//                                            editText8.setText("");
//                                            editText9.setText("");
                                        }
                                    });
                                }else if(jsonResult.equals("Update Fail")){
                                    task.snackbar(cl,"Update Fail");
                                }else if(jsonResult.equals("Something went wrong!")){
                                    task.snackbar(cl,"Something went wrong!");
                                }else if(jsonResult.equals("Token Invalid")){
                                    task.snackbar(cl,"Token Invalid");
                                }else if(jsonResult.equals("Email Invalid")){
                                    task.snackbar(cl,"Email Invalid");
                                }else if(jsonResult.equals("Password Incorrect")){
                                    task.snackbar(cl,"Password Incorrect");
                                }
                            }
                        } catch (JSONException e) {
                            e.printStackTrace();
                        }
                    }
                });
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return null;
        }
    }
}
