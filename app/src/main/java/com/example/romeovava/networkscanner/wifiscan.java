package com.example.romeovava.networkscanner;

import android.annotation.SuppressLint;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.wifi.ScanResult;
import android.net.wifi.SupplicantState;
import android.net.wifi.WifiConfiguration;
import android.net.wifi.WifiInfo;
import android.net.wifi.WifiManager;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.CountDownTimer;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentActivity;
import android.support.v7.widget.DefaultItemAnimator;
import android.support.v7.widget.DividerItemDecoration;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.support.v7.widget.helper.ItemTouchHelper;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.RelativeLayout;
import android.widget.Toast;

import com.yarolegovich.lovelydialog.LovelyTextInputDialog;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.BufferedReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import cn.pedant.SweetAlert.SweetAlertDialog;
import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

/**
 * Created by Romeo VaVa on 11/2/2018.
 *
 */
public class wifiscan extends Fragment implements RecyclerItemTouchHelper_wifi.RecyclerItemTouchHelperListener {
    private RecyclerView recyclerView;
    private static final String TAG = "Home_Page" ;
    private OkHttpClient okhttp=new OkHttpClient();
    ConnectivityManager cm;
    private List<content_wifi> cartList;
    Task task=new Task();
    String password_to_send="";
    String token;
    int netid;
    WifiInfo wi;
    private WifiManager wm;
    int check=0;
    int count=1;
    int check2=0;
    String value;
    String asd;
    int wifi_position=0;
    int bruteforce=0;
    int level;
    JSONArray password;
    int list_position;
    int zz;
    private wifi_listadapter mAdapter;
    UserLocalDatabase database;
    JSONObject chk;
    RelativeLayout cl;
    User user_profile;
    List<WifiConfiguration> configuredList;
    BufferedReader in;
    int bab;
    String text_check;
    int send;
    NetworkInfo ni;
    List<ScanResult> wifiscan;
    List<ScanResult> wifiscan_check;
    Nmap4j nmap4j;

    @Nullable
    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        View rootView = inflater.inflate(R.layout.wifiscan, container, false); //control all the wifi setting
        wm = (WifiManager) getActivity().getApplicationContext().getSystemService(Context.WIFI_SERVICE);
        //about the current connectivity
        cm = (ConnectivityManager) getActivity().getSystemService(Context.CONNECTIVITY_SERVICE);
        recyclerView = rootView.findViewById(R.id.recycler_view);
        cartList = new ArrayList<>();
        wifiscan_check = new ArrayList<>();
        //check the connectivity type
        ni = cm.getActiveNetworkInfo();
        wi = wm.getConnectionInfo();
        cl = rootView.findViewById(R.id.cl);
        if (ni != null) {
            if (ni.isConnected()) {
                database = new UserLocalDatabase(getActivity().getApplicationContext());
                user_profile = database.getUserData();
                wifi_connet();
                Log.d("asd", user_profile.token);
                //create a broadcast to receive the wifi
                wifiscanreceiver wsr = new wifiscanreceiver();
                //registerreceiver receive broadcast content
                //WifiManager.SCAN_RESULTS_AVAILABLE_ACTION - obtain the result
                getActivity().getApplicationContext().registerReceiver(wsr, new IntentFilter(WifiManager.SCAN_RESULTS_AVAILABLE_ACTION));
                //Broadcast intent action indicating that the state of establishing a connection to an access point has change
                getActivity().getApplicationContext().registerReceiver(wsr, new IntentFilter(WifiManager.SUPPLICANT_STATE_CHANGED_ACTION));
                //start scanning
                wm.startScan();
                //get the scanning result
                wifiscan = wm.getScanResults();
                for(int a=0;a<wifiscan.size();a++){

                    Log.d("wifiscan",wifiscan.get(a).SSID);
                }
                for(int a=0;a<wifiscan.size();a++){
                    String checking=wifiscan.get(a).SSID;
                    for(int b=a+1;b<wifiscan.size();b++){
                        if(checking.equals(wifiscan.get(b).SSID)){
                            break;
                        }else{
                            if(b==wifiscan.size()-1&&!checking.equals("")){
                                wifiscan_check.add(wifiscan.get(a));
                            }
                        }
                    }
                }
                configuredList = wm.getConfiguredNetworks();
                mAdapter = new wifi_listadapter(getActivity(), cartList);
                RecyclerView.LayoutManager layoutmanager = new LinearLayoutManager(getActivity().getApplicationContext());
                recyclerView.setLayoutManager(layoutmanager);
                recyclerView.setItemAnimator(new DefaultItemAnimator());
                recyclerView.addItemDecoration(new DividerItemDecoration(getActivity().getApplicationContext(), DividerItemDecoration.VERTICAL));
                recyclerView.setAdapter(mAdapter);
                ItemTouchHelper.SimpleCallback itemTouchHelperCallback = new RecyclerItemTouchHelper_wifi(0, ItemTouchHelper.LEFT, this);
                ItemTouchHelper.SimpleCallback itemTouchHelperCallback2 = new RecyclerItemTouchHelper_wifi(0, ItemTouchHelper.RIGHT, this);
                new ItemTouchHelper(itemTouchHelperCallback).attachToRecyclerView(recyclerView);
                Log.d("asd",user_profile.token);
                new ItemTouchHelper(itemTouchHelperCallback2).attachToRecyclerView(recyclerView);
                cartList.clear();
                create_list();
            } else {
                Toast.makeText(getContext(), "Please connect the Wi-Fi", Toast.LENGTH_LONG).show();
            }
        }
            return rootView;
    }

    private void  connectwifi(int netid){
        //disconnect all network
        wm.disconnect();
        //enabled the wifi
        wm.setWifiEnabled(true);
        //enable the network (because previous is disable)
        wm.enableNetwork(netid, true);
        //reconnect the network
        wm.reconnect();
    }
    private int wifi_setting(String wifiname,String password) {
        Log.d("asd3",wifiname);Log.d("asd4",password);
        password_to_send=password;
        //create a wifi configuration
        WifiConfiguration wifiConfig = new WifiConfiguration();
        configuredList = wm.getConfiguredNetworks();
        //name of the access point
        wifiConfig.SSID = "\""+wifiname+"\"";
        for(int a=0;a<configuredList.size();a++){
            if(wifiname.equals(configuredList.get(a).SSID.substring(1,configuredList.get(a).SSID.length()-1))){
                break;
            }else{
                if(a==configuredList.size()-1){
                    wifiConfig.preSharedKey = "\"\"";
                }
            }
        }
        if(!password.equals("")){
            //the password
            wifiConfig.preSharedKey = "\""+password+"\"";
        }
        //the ssid didnt broadcast, use to probes the ssid
        wifiConfig.hiddenSSID = true;
        //supplicant will consider this network available for association
        wifiConfig.status = WifiConfiguration.Status.ENABLED;
        /**
         * CCMP = AES in Counter mode with CBC-MAC [RFC 3610, IEEE 802.11i/D7.0]
            TKIP = Temporal Key Integrity Protocol [IEEE 802.11i/D7.0]
             WEP104 = WEP (Wired Equivalent Privacy) with 104-bit key
                WEP40 = WEP (Wired Equivalent Privacy) with 40-bit key (original 802.11)
         **/
        wifiConfig.allowedGroupCiphers.set(WifiConfiguration.GroupCipher.TKIP);
        wifiConfig.allowedGroupCiphers.set(WifiConfiguration.GroupCipher.CCMP);
        //Recognized key management schemes.
        wifiConfig.allowedKeyManagement.set(WifiConfiguration.KeyMgmt.WPA_PSK);
        //Recognized pairwise ciphers for WPA.
        wifiConfig.allowedPairwiseCiphers.set(WifiConfiguration.PairwiseCipher.TKIP);
        wifiConfig.allowedPairwiseCiphers.set(WifiConfiguration.PairwiseCipher.CCMP);
        //recognize the security protocol
        wifiConfig.allowedProtocols.set(WifiConfiguration.Protocol.RSN);
        wifiConfig.allowedProtocols.set(WifiConfiguration.Protocol.WPA);
        //Adds to the list of network and returns the network id which can be used to enable it later.
        return wm.addNetwork(wifiConfig);
    }

    private void wifi_connet() {
        SweetAlertDialog a;
        //get the wifi service from the wifimanager
        if(!wm.isWifiEnabled()){
            a = new SweetAlertDialog(getActivity().getApplicationContext(), SweetAlertDialog.WARNING_TYPE)
                    .setTitleText("Wifi Not Connected")
                    .setContentText("Please connect the wifi and try agian!")
                    .setConfirmText("Enable Wifi")
                    .setConfirmClickListener(new SweetAlertDialog.OnSweetClickListener() {
                        @Override
                        public void onClick(SweetAlertDialog sDialog) {
                            wm.setWifiEnabled(true);
                            sDialog
                                    .setTitleText("Wifi Enabled")
                                    .setContentText("Wifi is enable")
                                    .setConfirmText("OK")
                                    .setConfirmClickListener(null)
                                    .changeAlertType(SweetAlertDialog.SUCCESS_TYPE);
                        }
                    });
                    a.show();
        }

    }

    private void create_list() {
        List<content_wifi> list=new ArrayList<>();
        for(int a=0;a<wifiscan_check.size();a++){
            //calculate the signal
            level = WifiManager.calculateSignalLevel(wifiscan_check.get(a).level, 4);
            if(wi.getSSID().substring(1,wi.getSSID().length()-1).equals(wifiscan_check.get(a).SSID)){
                list.add(new content_wifi(wifiscan_check.get(a).SSID,level,"Connected"));

            }
            else{
                 list.add(new content_wifi(wifiscan_check.get(a).SSID,level,""));

            }
        }
        Collections.sort(list,new Comparator<content_wifi>() {
            @Override
            public int compare(content_wifi content_wifi, content_wifi t1) {
                return content_wifi.level.compareTo(t1.level);
            }
        });
        Collections.reverse(list);
        for(int a=0;a<list.size();a++){
            if(list.get(a).getValue().equals("Connected")){
                    Collections.swap(list,a,0);
                    for(int b=1;b<list.size();b++){
                        if(a!=b){
                            Collections.swap(list,a,b);
                        }
                    }


            }
        }
        cartList.addAll(list);
        mAdapter.notifyDataSetChanged();
    }

    @Override
    public void onSwiped(final RecyclerView.ViewHolder viewHolder, int direction, final int position) {
        if (viewHolder instanceof wifi_listadapter.viewholder) {
            bab=0;
            count = 0;
            zz=1;
            if (direction == 8) {
                bruteforce = 0;
                if (position == 0) {
                    if (cartList.get(position).getValue().equals("Connected")) {
                        mAdapter.notifyDataSetChanged();
                    } else {
                        dialog2(getActivity());
                    }
                } else {

                    mAdapter.notifyDataSetChanged();
                    wifi_position = position;
                    text_check = cartList.get(position).getItem();
                    netid = wifi_setting(cartList.get(position).getItem(), "");
                    if (netid != -1) {
                        cartList.set(0, new content_wifi(cartList.get(0).getItem(), level, ""));
                        mAdapter.notifyDataSetChanged();
                        Collections.swap(cartList, position, 0);
                        mAdapter.notifyDataSetChanged();
                        for (int b = 1; b < cartList.size(); b++) {
                            if (position != b) {
                                Collections.swap(cartList, position, b);
                                mAdapter.notifyDataSetChanged();
                            } else {
                                break;
                            }
                        }
                        connectwifi(netid);
                    } else {
                        dialog("Enter the password", "Enter the wifi password", "");
                    }
                }
            } else {
                bruteforce = 1;
                if (position == 0) {
                    if (cartList.get(position).getValue().equals("Connected")) {
                        mAdapter.notifyDataSetChanged();
                    }
                }else{
                        if (cartList.get(position).getItem().equals(cartList.get(0).getItem())) {
                            wifi_position = 0;
                        } else {
                            wifi_position = position;
                        }

                    Log.d("asd1",""+cartList.get(wifi_position).getId());
                    Log.d("asd2",""+cartList.get(0).getId());
                        text_check = cartList.get(position).getItem();
                        get_password gp = new get_password();
                        gp.execute();
                        mAdapter.notifyDataSetChanged();
                }
            }
        }
    }
    public void dialog(String title,String message,String input_filter){

        Log.d("asd","2");
        cartList.set(0, new content_wifi(cartList.get(0).getItem(), level, ""));
        mAdapter.notifyDataSetChanged();
        if(bab==0){
            bab=1;
            LovelyTextInputDialog a= new LovelyTextInputDialog(getActivity())
                    .setTopColorRes(R.color.green_dialog)
                    .setTitle("Enter password")
                    .setMessage("Enter the wifi password")
                    .setIcon(R.drawable.ic_edit)
                    .setNegativeButton(android.R.string.no, new View.OnClickListener() {
                        @Override
                        public void onClick(View view) {
                            bab=0;
                        }
                    })
                    .setConfirmButton(android.R.string.ok, new LovelyTextInputDialog.OnTextInputConfirmListener() {
                        @Override
                        public void onTextInputConfirmed(String text) {
                            bab=0;
                            if(cartList.get(wifi_position).getItem().equals(cartList.get(0).getItem())){
                                netid= wifi_setting(cartList.get(0).getItem(),text);
                            }else{
                                netid= wifi_setting(cartList.get(wifi_position).getItem(),text);
                            }
                            if(netid!= -1){
                                cartList.set(0,new content_wifi(cartList.get(0).getItem(),level,""));
                                mAdapter.notifyDataSetChanged();
                                Collections.swap(cartList,wifi_position,0);
                                mAdapter.notifyDataSetChanged();
                                for(int b=1;b<cartList.size();b++){
                                    if(wifi_position!=b){
                                        Collections.swap(cartList,wifi_position,b);
                                        mAdapter.notifyDataSetChanged();
                                    }else{
                                        break;
                                    }
                                }
                                connectwifi(netid);
                            }else{
                                new SweetAlertDialog(recyclerView.getContext())
                                        .setTitleText("Password incorrect!").show();
                            }
                        }
                    });
            a.show();
        }

    }

    public void dialog2(FragmentActivity fa){
        Log.d("asd","asd");
        cartList.set(0, new content_wifi(cartList.get(0).getItem(), level, ""));
        mAdapter.notifyDataSetChanged();
        if(bab==0) {
            bab=1;
            LovelyTextInputDialog a = new LovelyTextInputDialog(getActivity())
                    .setTopColorRes(R.color.green_dialog)
                    .setTitle("Enter password")
                    .setMessage("Enter the wifi password")
                    .setIcon(R.drawable.ic_edit)
                    .setConfirmButton(android.R.string.ok, new LovelyTextInputDialog.OnTextInputConfirmListener() {
                        @Override
                        public void onTextInputConfirmed(String text) {
                            bab=0;
                            netid = wifi_setting(cartList.get(0).getItem(), text);
                            if (netid != -1) {
                                connectwifi(netid);
                            } else {
                                new SweetAlertDialog(recyclerView.getContext())
                                        .setTitleText("Password incorrect!").show();
                            }
                        }
                    });
            a.setNegativeButton(android.R.string.no, new View.OnClickListener() {
                @Override
                public void onClick(View view) {
                }
            });
            a.show();
        }

    }


    //base class to receive broadcast intent
    public class wifiscanreceiver extends BroadcastReceiver{
        String TAG = "asd";
        private Context mContext;
        @Override
        public void onReceive(Context context, Intent intent) {
            String action  = intent.getAction();
            int level= Integer.parseInt(cartList.get(0).getLevel());
            //check any change
            if(action.equals(WifiManager.SUPPLICANT_STATE_CHANGED_ACTION)){
                //get the supplicant state
                //intent.getParcelableExtr - retrieve extended data
                //extra new state- describe the new state
                SupplicantState supl_state=((SupplicantState)intent.getParcelableExtra(WifiManager.EXTRA_NEW_STATE));
                switch(supl_state){
                    case ASSOCIATED:
                        Log.i("SupplicantState", "ASSOCIATED");
                        cartList.set(0,new content_wifi(cartList.get(0).getItem(),level,"Associated"));
                        mAdapter.notifyDataSetChanged();
                        asd="ASSOCIATED";
                        break;
                    case ASSOCIATING:
                        Log.i("SupplicantState", "ASSOCIATING");
                        cartList.set(0,new content_wifi(cartList.get(0).getItem(),level,"Associating"));
                        mAdapter.notifyDataSetChanged();
                        asd="ASSOCIATING";
                        break;
                    case AUTHENTICATING:
                        Log.i("SupplicantState", "Authenticating...");
                        cartList.set(0,new content_wifi(cartList.get(0).getItem(),level,"Authenticating..."));
                        mAdapter.notifyDataSetChanged();
                        asd="AUTHENTICATING";
                        break;
                    case COMPLETED:
                        if(bruteforce==1){
                            bab=1;
                            wi = wm.getConnectionInfo();
                            if (ni.isConnected()) {
                                if(wi.getSSID().substring(1, wi.getSSID().length() - 1).equals(cartList.get(0).getItem())){
                                    zz=0;
                                    cartList.set(0, new content_wifi(cartList.get(0).getItem(), level, "Connected"));
                                    mAdapter.notifyDataSetChanged();
                                    bruteforce=0;
                                }
                            }else{
                                wm.removeNetwork(cartList.get(0).getId());
                                cartList.set(0, new content_wifi(cartList.get(0).getItem(), level, ""));
                                mAdapter.notifyDataSetChanged();
                                    try {
                                        if(password!=null) {
                                            chk = password.getJSONObject(count);
                                        }
                                        count+=1;

                                        Log.d("hi2",chk.getString("pass"));
                                        if(password!=null){
                                            if(count==password.length()){
                                                count+=1;
                                            }
                                            netid = wifi_setting(cartList.get(0).getItem(),chk.getString("pass"));
                                            if (netid != -1) {
                                                connectwifi(netid);
                                            }
                                        }
                                    } catch (JSONException e) {
                                        e.printStackTrace();
                                        netid = wifi_setting(cartList.get(0).getItem(),"");
                                        if (netid != -1) {
                                            connectwifi(netid);
                                        }
                                    }
                                }
                        }else {
                            wi = wm.getConnectionInfo();
                            if (ni.isConnected()) {
                                if(wi.getSSID().length()!=0) {
                                    if (wi.getSSID().substring(1, wi.getSSID().length() - 1).equals(cartList.get(0).getItem())) {
                                        cartList.set(0, new content_wifi(cartList.get(0).getItem(), level, "Connected"));
                                        count = 0;
                                        mAdapter.notifyDataSetChanged();
                                        if (ni.isConnected() && !password_to_send.equals("")) {
                                            new CountDownTimer(3000, 1000) {

                                                public void onTick(long millisUntilFinished) {
                                                }

                                                public void onFinish() {
                                                    Log.d("saved", "saved");
                                                    save_password sp = new save_password();
                                                    sp.execute();
                                                }
                                            }.start();
                                        }
                                    }
                                }
                            } else {
                                wm.removeNetwork(cartList.get(0).getId());
                                cartList.set(0, new content_wifi(cartList.get(0).getItem(), level, ""));
                                mAdapter.notifyDataSetChanged();
                                dialog2(getActivity());
                            }
                        }
                        break;
                    case DISCONNECTED:
                        Log.i("SupplicantState", "Disconnected");
                        cartList.set(0,new content_wifi(cartList.get(0).getItem(),level,"Disconnected"));
                        mAdapter.notifyDataSetChanged();
                        asd="DISCONNECT";
                        break;
                    case DORMANT:
                        Log.i("SupplicantState", "DORMANT");
                        cartList.set(0,new content_wifi(cartList.get(0).getItem(),level,"Dormant"));
                        mAdapter.notifyDataSetChanged();
                        asd="DORMANT";
                        break;
                    case FOUR_WAY_HANDSHAKE:
                        Log.i("SupplicantState", "FOUR_WAY_HANDSHAKE");
                        cartList.set(0,new content_wifi(cartList.get(0).getItem(),level,"Four way handshake"));
                        mAdapter.notifyDataSetChanged();
                        asd="FOURWAYHAND";
                        break;
                    case GROUP_HANDSHAKE:
                        Log.i("SupplicantState", "GROUP_HANDSHAKE");
                        cartList.set(0,new content_wifi(cartList.get(0).getItem(),level,"Group handshake"));
                        mAdapter.notifyDataSetChanged();
                        asd="GROUP";
                        break;
                    case INACTIVE:
                        asd="INACTIVE";
                            if(bruteforce==1){
                                cartList.set(0,new content_wifi(cartList.get(0).getItem(),level,"Inactive"));
                                mAdapter.notifyDataSetChanged();
                                try {
                                    if(password!=null){
                                        chk=password.getJSONObject(count);
                                        if(count==password.length()){
                                            count+=1;
                                        }
                                        count+=1;
                                        Log.d("hi2",chk.getString("pass"));
                                        netid = wifi_setting(cartList.get(0).getItem(),chk.getString("pass"));
                                        if (netid != -1) {
                                            connectwifi(netid);
                                        }
                                    }

                                } catch (JSONException e) {
                                    e.printStackTrace();
                                }
                            }else{
                                bab=0;
                                cartList.set(0,new content_wifi(cartList.get(0).getItem(),level,"Inactive"));
                                mAdapter.notifyDataSetChanged();
                            }
                            break;
                    case INTERFACE_DISABLED:
                        Log.i("SupplicantState", "INTERFACE_DISABLED");
                        cartList.set(0,new content_wifi(cartList.get(0).getItem(),level,"Interface Disabled"));
                        mAdapter.notifyDataSetChanged();
                        asd="ASSOCIATED";
                        break;
                    case INVALID:
                        Log.i("SupplicantState", "INVALID");
                        cartList.set(0,new content_wifi(cartList.get(0).getItem(),level,"Invaliid"));
                        mAdapter.notifyDataSetChanged();
                        asd="INVALID";
                        break;
                    case SCANNING:
                        Log.i("SupplicantState", "SCANNING");
                        cartList.set(0,new content_wifi(cartList.get(0).getItem(),level,"Scanning"));
                        mAdapter.notifyDataSetChanged();
                        asd="SCANNING";
                        break;
                    case UNINITIALIZED:
                        Log.i("SupplicantState", "UNINITIALIZED");
                        cartList.set(0,new content_wifi(cartList.get(0).getItem(),level,"Uninitialized"));
                        mAdapter.notifyDataSetChanged();
                        asd="UNINTIALIZED";
                        break;
                    default:
                        Log.i("SupplicantState", "Unknown");
                        cartList.set(0,new content_wifi(cartList.get(0).getItem(),level,"Unknown"));
                        mAdapter.notifyDataSetChanged();
                        asd="UNKNWN";
                        break;

                }
                //if the intent is error that mean authenticating fail
                int supl_error=intent.getIntExtra(WifiManager.EXTRA_SUPPLICANT_ERROR, -1);
                if(supl_error==WifiManager.ERROR_AUTHENTICATING){
                        if(bruteforce==1){
                                try {
                                    if(password!=null){
                                        chk=password.getJSONObject(count);

                                        Log.d("hi2",chk.getString("pass"));
                                        count+=1;
                                        netid = wifi_setting(cartList.get(0).getItem(),chk.getString("pass"));

                                        if (netid != -1) {
                                            connectwifi(netid);
                                        }
                                    }
                                } catch (JSONException e) {
                                    e.printStackTrace();
                            }
                        }else{
                            try{
                            if(!text_check.equals(cartList.get(wifi_position).getItem())){
                                dialog2(getActivity());
                            }else{
                                dialog("Enter the password","Enter the wifi password","");

                            }
                            }catch(NullPointerException e){

                            }
                        }
                }
                try{
                    if (!wi.getSSID().substring(1, wi.getSSID().length() - 1).equals(cartList.get(0).getItem())) {
                        if(count==(password.length()+1)) {
                            if(zz==1){
                                task.snackbar(cl, "Password not found");
                                zz=0;
                            }
                            cartList.set(0, new content_wifi(cartList.get(0).getItem(), level, ""));
                            mAdapter.notifyDataSetChanged();
                        }
                    }
                }catch(NullPointerException e){

                }
            }
        }

    }
    @SuppressLint("StaticFieldLeak")
    private class save_password extends AsyncTask<Void,Void,String> {
        @Override
        protected String doInBackground(Void... voids) {
            String url="http://172.20.10.2/wifi_password/add_ssid";
            String[] data=new String[3];
            String[] data_type=new String[3];
            data_type[0]="email";
            data_type[1]="token";
            data_type[2]="password";
            data[0]=user_profile.email;
            data[1]=user_profile.token;
            data[2]=password_to_send;
            password_to_send="";
            try {
                String json=task.model(data,data_type);
                Request request=task.post(url,json);
                okhttp.newCall(request).enqueue(new Callback() {
                    @Override
                    public void onFailure(@NonNull Call call, @NonNull IOException e) {
                    }

                    @Override
                    public void onResponse(@NonNull Call call, @NonNull Response response) throws IOException {
                        try {
                            if(response.isSuccessful()){
                                String message=response.body().string();
                                JSONObject result=new JSONObject(message);
                                String jsonResult=result.getString("Response");
                                if(jsonResult.equals("Updated")||jsonResult.equals("Saved")){
                                    JSONArray items = result.getJSONArray("User");
                                    JSONObject user=items.getJSONObject(0);
                                    token=user.getString("token");
                                    task.snackbar_pass2(cl,"Password saved to database");
                                    if(!(token.equals(user_profile.token))){
                                        database.storeToken(token);
                                        user_profile=database.getUserData();
                                    }
                                }else if(jsonResult.equals("Already have")){
                                    JSONArray items = result.getJSONArray("User");
                                    JSONObject user=items.getJSONObject(0);
                                    token=user.getString("token");
                                    if(!(token.equals(user_profile.token))){
                                        database.storeToken(token);
                                        user_profile=database.getUserData();
                                    }
                                }else if(jsonResult.equals("Update Fail")){
                                    task.snackbar(cl,"Update Fail");
                                }else if(jsonResult.equals("Something went wrong!")){
                                    task.snackbar(cl,"Something went wrong!");
                                }else if(jsonResult.equals("Token Invalid")){
                                    task.snackbar(cl,"Token Invalid");
                                }else if(jsonResult.equals("Email Invalid")){
                                    task.snackbar(cl,"Email Invalid");
                                }
                            }
                        } catch (JSONException e) {
                            e.printStackTrace();
                        }
                    }
                });
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return null;
        }
    }

    @SuppressLint("StaticFieldLeak")
    private class get_password extends AsyncTask<Void,Void,String> {
        @Override
        protected String doInBackground(Void... voids) {
            String url="http://172.20.10.2/wifi_password/get_ssid";
            String[] data=new String[2];
            String[] data_type=new String[2];
            data_type[0]="email";
            data_type[1]="token";
            data[0]=user_profile.email;
            data[1]=user_profile.token;
            try {
                String json=task.model(data,data_type);
                Request request=task.post(url,json);
                okhttp.newCall(request).enqueue(new Callback() {
                    @Override
                    public void onFailure(@NonNull Call call, @NonNull IOException e) {
                        task.snackbar(cl,"No Wi-Fi Connection");
                    }

                    @Override
                    public void onResponse(@NonNull Call call, @NonNull Response response) throws IOException {
                        try {
                            send=0;
                            if(response.isSuccessful()){
                                String message=response.body().string();
                                JSONObject result=new JSONObject(message);
                                String jsonResult=result.getString("Response");
                                if(jsonResult.equals("Success")){
                                    JSONArray items = result.getJSONArray("User");
                                    password= result.getJSONArray("Password");
                                    JSONObject user=items.getJSONObject(0);
                                    token=user.getString("token");
                                    if(!(token.equals(user_profile.token))){
                                        database.storeToken(token);
                                        user_profile=database.getUserData();
                                    }
                                    send=1;
                                }else if(jsonResult.equals("Not Found")){
                                    JSONArray items = result.getJSONArray("User");
                                    JSONObject user=items.getJSONObject(0);
                                    token=user.getString("token");
                                    if(!(token.equals(user_profile.token))){
                                        database.storeToken(token);
                                        user_profile=database.getUserData();
                                    }
                                    task.snackbar(cl,"Not Found");
                                }else if(jsonResult.equals("Update Fail")){
                                    task.snackbar(cl,"Update Fail");
                                }else if(jsonResult.equals("Something went wrong!")){
                                    task.snackbar(cl,"Something went wrong!");
                                }else if(jsonResult.equals("Token Invalid")){
                                    task.snackbar(cl,"Token Invalid");
                                }else if(jsonResult.equals("Email Invalid")){
                                    task.snackbar(cl,"Email Invalid");
                                }
                            }
                            getActivity().runOnUiThread(new Runnable() {
                                @Override
                                public void run() {
                                    if(send==1){
                                        cartList.set(0, new content_wifi(cartList.get(0).getItem(), level, ""));
                                        mAdapter.notifyDataSetChanged();
                                        Collections.swap(cartList, wifi_position, 0);
                                        mAdapter.notifyDataSetChanged();
                                        for (int b = 1; b < cartList.size(); b++) {
                                            if (wifi_position != b) {
                                                Collections.swap(cartList, wifi_position, b);
                                                mAdapter.notifyDataSetChanged();
                                            } else {
                                                try {
                                                    netid= wifi_setting(cartList.get(0).getItem(), password.getJSONObject(0).getString("pass"));
                                                } catch (JSONException e) {
                                                    e.printStackTrace();
                                                }
                                                connectwifi(netid);
                                                break;
                                            }
                                        }
                                        send=0;
                                    }
                                }
                            });
                        } catch (JSONException e) {
                            e.printStackTrace();
                        }
                    }
                });
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return null;
        }
    }
}