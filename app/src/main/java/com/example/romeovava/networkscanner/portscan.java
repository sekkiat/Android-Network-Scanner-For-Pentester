package com.example.romeovava.networkscanner;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Rect;
import android.os.AsyncTask;
import android.os.Bundle;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentActivity;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentStatePagerAdapter;
import android.support.v4.view.PagerAdapter;
import android.support.v4.view.ViewPager;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.util.Log;
import android.view.MenuItem;
import android.view.View;

import org.nmap4j.core.nmap.NMapExecutionException;
import org.nmap4j.core.nmap.NMapInitializationException;

import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.List;

import cn.pedant.SweetAlert.SweetAlertDialog;

/**
 * Created by Romeo VaVa on 24/2/2018.
 */

public class portscan extends AppCompatActivity implements ViewPager.OnPageChangeListener,ViewPager.PageTransformer {
    int Num_pages;
    ViewPager vp;
    PagerAdapter  pa;
    SweetAlertDialog pDialog;
    port_listadapter ipa;
    int position;
    Intent intent;
    String ip;
    private List<content_port> cartList;
    List<String> port_array =new ArrayList<>();
    List<String> protocol_array =new ArrayList<>();
    List<String> state_array =new ArrayList<>();
    List<String> service_array =new ArrayList<>();
    List<String> application_array =new ArrayList<>();
    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.port_slide);
        Toolbar toolbar=findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);
        if (getSupportActionBar() != null) {
            getSupportActionBar().setTitle("Port Scanning");
            getSupportActionBar().setDisplayShowHomeEnabled(true);
            getSupportActionBar().setDisplayHomeAsUpEnabled(true);
            getSupportActionBar().setHomeAsUpIndicator(R.drawable.ic_arrow_back);
        }
        intent=getIntent();
        pDialog = new SweetAlertDialog(this, SweetAlertDialog.PROGRESS_TYPE);
        pDialog.getProgressHelper().setBarColor(Color.parseColor("#A5DC86"));
        pDialog.setTitleText("Loading");
        pDialog.setCancelable(false);
        pDialog.show();
        vp=findViewById(R.id.pager);
        cartList = new ArrayList<>();
        ip=intent.getStringExtra("ip");
        abc a=new abc();
        a.execute();
    }


    @Override
    public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {

    }

    @Override
    public void onPageSelected(int position) {


    }

    @Override
    public void onBackPressed() {
        super.onBackPressed();
    }

    @Override
    public void onPageScrollStateChanged(int state) {

    }

    @Override
    public void transformPage(@NonNull View page, float position) {
        page.setLayerType(View.LAYER_TYPE_NONE, null);

    }
    public static float dpToPixels(int dp, Context context) {
        return dp * (context.getResources().getDisplayMetrics().density);
    }

    @SuppressLint("StaticFieldLeak")
    public class abc extends AsyncTask<Void,Void,String> {

        @Override
        protected String doInBackground(Void... voids) {
            String port,protocol,state,service,application;
            Nmap4j nmap4j = new Nmap4j( "/system/bin/nmap2" ) ;
            nmap4j.includeHosts("-sV "+ip);
            Log.d("asd",ip);
            try {
                nmap4j.execute();
                if( !nmap4j.hasError() ) {
                    String result=nmap4j.getOutput();
                    Log.d("asd",result);
                    //delete port
                    int len;
                    String delete = result.substring(0, result.indexOf("PORT"));
                    len=delete.length();
                    result=result.substring(len,result.length()-1);
                    Log.d("rrr",result);
                    delete = result.substring(0, result.indexOf("\n"));
                    len=delete.length();
                    result=result.substring(len,result.length()-1);
                    Log.d("asd",result);
                    while(result.contains("open")){
                        port=result.substring(0,result.indexOf("/"));
                        result=result.substring(result.indexOf("/"),result.length());
                        protocol=result.substring(result.indexOf("/")+1,result.indexOf(" "));
                        result=result.substring(result.indexOf(" "),result.length());
                        state=result.substring(result.indexOf("open"),result.indexOf("open")+4);
                        result=result.substring(result.indexOf("open")+4,result.length());
                        while(result.substring(0,1).equals(" ")){
                            result=result.substring(1,result.length());
                        }
                        service=result.substring(0,result.indexOf(" "));
                        result=result.substring(result.indexOf(" "),result.length());
                        while(result.indexOf(" ")==0){
                            result=result.substring(1,result.length());
                        }
                        application=result.substring(0,result.indexOf("\n"));
                        result=result.substring(result.indexOf("\n"),result.length());
                        port_array.add(port);
                        protocol_array.add("Protocol: "+protocol);
                        state_array.add("State: "+state);
                        service_array.add("Service: "+service);
                        application_array.add(application);
                        Num_pages=service_array.size();
                    }
                    if(result.contains("are closed")){
                        cartList.add(new content_port("There is","no port","found on ",ip,""));
                        portscan.this.runOnUiThread(new Runnable() {
                            @Override
                            public void run() {
                                ipa=new port_listadapter(portscan.this,cartList);
                                vp.setAdapter(ipa);
                                pDialog.dismissWithAnimation();
                            }
                        });
                    }
                } else {
                    Log.d("asd",nmap4j.getExecutionResults().getErrors());
                }
                for(int a=0;a<service_array.size();a++){
                    cartList.add(new content_port(port_array.get(a),protocol_array.get(a),state_array.get(a),service_array.get(a),application_array.get(a)));
                    portscan.this.runOnUiThread(new Runnable() {
                        @Override
                        public void run() {
                            ipa=new port_listadapter(portscan.this,cartList);
                            vp.setAdapter(ipa);
                             pDialog.dismissWithAnimation();
                        }
                    });
                }
            } catch (NMapInitializationException e) {
                e.printStackTrace();
            } catch (NMapExecutionException e) {
                e.printStackTrace();
            }
            return null;
        }
    }

}
