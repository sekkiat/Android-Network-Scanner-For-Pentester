package com.example.romeovava.networkscanner;

import android.annotation.SuppressLint;
import android.graphics.Typeface;
import android.media.Image;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Handler;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.constraint.ConstraintLayout;
import android.support.design.widget.AppBarLayout;
import android.support.v4.app.Fragment;
import android.support.v7.app.AppCompatActivity;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.Toast;


import com.github.anastr.speedviewlib.PointerSpeedometer;
import com.stealthcopter.networktools.Ping;
import com.stealthcopter.networktools.ping.PingResult;
import com.stealthcopter.networktools.ping.PingStats;

import java.io.IOException;
import java.net.UnknownHostException;

import fr.bmartel.speedtest.SpeedTestReport;
import fr.bmartel.speedtest.SpeedTestSocket;
import fr.bmartel.speedtest.inter.IRepeatListener;
import fr.bmartel.speedtest.inter.ISpeedTestListener;
import fr.bmartel.speedtest.model.SpeedTestError;
import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

/**
 * Created by Romeo VaVa on 9/2/2018.
 */

public class speedtest extends Fragment implements View.OnClickListener {
    private static final int NUM_PAGES = 2;
    Handler handler;
    AppBarLayout al;
    ImageView dot;
    ConstraintLayout cl;
    Task task=new Task();
    android.widget.TextView my_ip, server_ip, TextView, textp, serverp, text, text2, text3, ping, download, upload;
    ImageButton ib;
    private OkHttpClient okhttp = new OkHttpClient();
    long timeofping;
    PointerSpeedometer pointerSpeedometer;

    @Nullable
    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        View rootView = inflater.inflate(R.layout.speedtest, container, false);
        Get_My_Ip gmi = new Get_My_Ip();
        gmi.execute();
        cl=rootView.findViewById(R.id.cl);
        my_ip = rootView.findViewById(R.id.my_ip);
        server_ip = rootView.findViewById(R.id.server_ip);
        textp = rootView.findViewById(R.id.textp);
        dot = rootView.findViewById(R.id.dot);
        serverp = rootView.findViewById(R.id.serverp);
        ib = rootView.findViewById(R.id.startesting);
        pointerSpeedometer= (PointerSpeedometer) rootView.findViewById(R.id.pointerSpeedometer);
        text =rootView.findViewById(R.id.text);
        text2 =rootView.findViewById(R.id.text2);
        text3 =rootView.findViewById(R.id.text3);
        ping = rootView.findViewById(R.id.ping);
        download = rootView.findViewById(R.id.download);
        upload = rootView.findViewById(R.id.upload);
        set_font();
        handler = new Handler();
        ib.setOnClickListener(this);
        return rootView;
    }


    private void set_font() {
        Typeface mtypeFace = Typeface.createFromAsset(getActivity().getAssets(), "font/ARLRDBD.TTF");
        my_ip.setTypeface(mtypeFace);
        server_ip.setTypeface(mtypeFace);
        textp.setTypeface(mtypeFace);
        serverp.setTypeface(mtypeFace);
        text2.setTypeface(mtypeFace);
        text3.setTypeface(mtypeFace);
        text.setTypeface(mtypeFace);
        ping.setTypeface(mtypeFace);
        download.setTypeface(mtypeFace);
        upload.setTypeface(mtypeFace);
    }

    @Override
    public void onClick(View view) {
        switch (view.getId()) {
            case R.id.startesting:
                ping.setText("0");
                download.setText("0");
                upload.setText("0");
                ib.setImageResource(R.drawable.waituntilfinish);
                ib.setEnabled(false);
                ping ping=new ping();
                ping.execute();
        }
    }

    public class Get_My_Ip extends AsyncTask<Void, Void, String> {
        @Override
        protected String doInBackground(Void... voids) {
            Request request = new Request.Builder().url("http://whatismyip.akamai.com/").build();
            okhttp.newCall(request).enqueue(new Callback() {
                @Override
                public void onFailure(Call call, IOException e) {

                }

                @Override
                public void onResponse(Call call, final Response response) throws IOException {
                    final String message;
                    if (response.isSuccessful()) {
                        message = response.body().string();
                        getActivity().runOnUiThread(new Runnable() {
                            @Override
                            public void run() {
                                my_ip.setText(message);
                            }
                        });
                    }
                }
            });
            return null;
        }
    }

    private class Download extends AsyncTask<Void, Void, String> {
        double download_rate = 0;
        double speed;

        @Override
        protected String doInBackground(Void... voids) {
            getActivity().runOnUiThread(new Runnable() {
                @Override
                public void run() {
                    dot.setImageResource(R.drawable.dot3);
                }
            });
            final SpeedTestSocket sts = new SpeedTestSocket();
            sts.setSocketTimeout(120000);
            sts.addSpeedTestListener(new ISpeedTestListener() {
                @Override
                public void onCompletion(SpeedTestReport report) {
                }

                @Override
                public void onProgress(float percent, SpeedTestReport report) {
                    speed = (report.getTransferRateBit().doubleValue() / 1024) / 1024;
                    if (download_rate < speed) {
                        download_rate = speed;
                        getActivity().runOnUiThread(new Runnable() {
                            @SuppressLint("DefaultLocale")
                            @Override
                            public void run() {
                                download.setText(String.format("%.2f", speed));
                                pointerSpeedometer.speedTo((float) speed);
                            }
                        });
                    }
                }

                @Override
                public void onError(SpeedTestError speedTestError, String errorMessage) {
                }
            });
            sts.startDownloadRepeat("http://2.testdebit.info/fichiers/1Mo.dat", 10000, 1000, new IRepeatListener() {
                @Override
                public void onCompletion(SpeedTestReport report) {
                    getActivity().runOnUiThread(new Runnable() {
                        @SuppressLint("DefaultLocale")
                        @Override
                        public void run() {
                            pointerSpeedometer.speedTo(0);
                            pointerSpeedometer.setWithTremble(false);
                        }
                    });
                    handler.postDelayed(new Runnable() {
                        public void run() {
                            Upload upload = new Upload();
                            upload.execute();
                        }
                    }, 2000);
                }

                @Override
                public void onReport(SpeedTestReport report) {

                }
            });
            return null;
        }
    }

    private class Upload extends AsyncTask<Void, Void, String> {
        double upload_rate = 0;
        double speed;

        @Override
        protected String doInBackground(Void... voids) {
            getActivity().runOnUiThread(new Runnable() {
            @Override
            public void run() {
                dot.setImageResource(R.drawable.dot4);
            }
        });
            final SpeedTestSocket sts = new SpeedTestSocket();
            sts.setSocketTimeout(6000);
            sts.addSpeedTestListener(new ISpeedTestListener() {
                @Override
                public void onCompletion(SpeedTestReport report) {
                }

                @Override
                public void onProgress(float percent, SpeedTestReport report) {
                    Log.d("asd","asd");
                    speed = (report.getTransferRateBit().doubleValue() / 1024) / 1024;
                    if (upload_rate < speed) {
                        upload_rate = speed;
                        getActivity().runOnUiThread(new Runnable() {
                            @SuppressLint("DefaultLocale")
                            @Override
                            public void run() {
                                upload.setText(String.format("%.2f", speed));
                                pointerSpeedometer.speedTo((float) speed);
                            }
                        });
                    }
                }

                @Override
                public void onError(SpeedTestError speedTestError, String errorMessage) {
                }
            });
            sts.startUploadRepeat("http://2.testdebit.info/", 10000,1500,new IRepeatListener() {
                @Override
                public void onCompletion(final SpeedTestReport report) {
                    getActivity().runOnUiThread(new Runnable() {
                        @Override
                        public void run() {
                            dot.setImageResource(R.drawable.dot);
                            pointerSpeedometer.speedTo(0);
                            pointerSpeedometer.setWithTremble(false);
                            ib.setEnabled(true);
                            ib.setImageResource(R.drawable.start_testing);
                        }
                    });
                    task.snackbar_pass(cl,"Scan Completed");
                }

                @Override
                public void onReport(final SpeedTestReport report) {
                }
            });
            return null;
        }
    }

    private class ping extends AsyncTask<Void,Void,String> {
        Runtime runtime = Runtime.getRuntime();
        long current_time;
        @Override
        protected String doInBackground(Void... voids) {
            getActivity().runOnUiThread(new Runnable() {
                @Override
                public void run() {
                    dot.setImageResource(R.drawable.dot2);
                }
            });
            try {
                current_time = System.currentTimeMillis() % 1000;
                Ping.onAddress("8.8.8.8").setTimeOutMillis(1000).setTimes(5).doPing(new Ping.PingListener() {
                    @Override
                    public void onResult(PingResult pingResult) {
                        timeofping = System.currentTimeMillis() % 1000 - current_time;
                        getActivity().runOnUiThread(new Runnable() {
                            @Override
                            public void run() {
                                ping.setText(String.valueOf(timeofping));
                            }
                        });
                    }

                    @Override
                    public void onFinished(PingStats pingStats) {
                        handler.postDelayed(new Runnable() {
                            public void run() {
                                Download download=new Download();
                                download.execute();
                            }
                        }, 2000);
                    }
                });
            } catch (UnknownHostException e) {
                e.printStackTrace();
            }

            return null;
        }
    }
}
