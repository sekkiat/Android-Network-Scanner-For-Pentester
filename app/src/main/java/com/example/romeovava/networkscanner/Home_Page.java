package com.example.romeovava.networkscanner;

import android.annotation.SuppressLint;
import android.content.Intent;
import android.os.AsyncTask;
import android.os.Bundle;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.constraint.ConstraintLayout;
import android.support.v7.app.AppCompatActivity;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.IOException;

import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

/**
 * Created by Romeo VaVa on 31/1/2018.
 */

public class Home_Page extends AppCompatActivity  implements View.OnClickListener{
    private static final String TAG = "2MainActivity" ;
    User email2;
    UserLocalDatabase database;
    User user_profile;
    EditText email,name,editText7,editText8,editText9;
    TextView token,img_url,expired_time;
    ConstraintLayout cl;
    Task task=new Task();
    String mail;
    private OkHttpClient okhttp=new OkHttpClient();
    Button logout,emailb,namae,password;
    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.home_page);
        cl=findViewById(R.id.layout);
        database=new UserLocalDatabase(this);
        logout=findViewById(R.id.logout);
        email=findViewById(R.id.email);
        name=findViewById(R.id.name);
        editText7=findViewById(R.id.editText7);
        editText8=findViewById(R.id.editText8);
        editText9=findViewById(R.id.editText9);
        token=findViewById(R.id.token);
        img_url=findViewById(R.id.img_url);
        expired_time=findViewById(R.id.expired_time);
        emailb=findViewById(R.id.emailb);
        namae=findViewById(R.id.namae);
        password=findViewById(R.id.password);
        logout.setOnClickListener(this);
        emailb.setOnClickListener(this);
        namae.setOnClickListener(this);
        password.setOnClickListener(this);
    }

    @Override
    protected void onStart() {
        super.onStart();
        if(authenticate()){
            user_profile=database.getUserData();
            email.setText(user_profile.email);
            name.setText(user_profile.name);
            token.setText(user_profile.token);
            img_url.setText(user_profile.image_url);
            expired_time.setText(user_profile.expired_time);
        }else{
            database.clearUserData();
            Intent intent=new Intent(Home_Page.this, MainActivity.class);
            startActivity(intent);
        }
    }

    private boolean authenticate() {
        return database.getUserLoggedIn();
    }

    @Override
    public void onClick(View view) {
        switch (view.getId()){
            case R.id.logout:
                database.clearUserData();
                Intent intent=new Intent(Home_Page.this, MainActivity.class);
                startActivity(intent);
                break;
            case R.id.emailb:
                At at=new At();
                at.execute();
                break;
            case R.id.namae:
                At2 at2=new At2();
                at2.execute();
                break;
            case R.id.password:
                if(editText8.getText().toString().equals(editText9.getText().toString())){
                    At3 at3=new At3();
                    at3.execute();
                }else{
                    task.snackbar(cl,"Password not match");
                }
                break;

        }
    }
    @SuppressLint("StaticFieldLeak")
    private class At extends AsyncTask<Void,Void,String> {
        @Override
        protected String doInBackground(Void... voids) {
            email2=database.getUserData();
            String url="http://172.20.10.2/user_profile/email";
            String[] data=new String[3];
            String[] data_type=new String[3];
            data_type[0]="email";
            data_type[1]="email2";
            data_type[2]="token";
            data[0]=email.getText().toString();
            data[1]=email2.email;
            data[2]=token.getText().toString();
            try {
                String json=task.model(data,data_type);
                Request request=task.post(url,json);
                //Using OKHttp to request the data from the server
                okhttp.newCall(request).enqueue(new Callback() {
                    @Override
                    public void onFailure(@NonNull Call call, @NonNull IOException e) {
                    }

                    @Override
                    public void onResponse(@NonNull Call call, @NonNull Response response) throws IOException {
                        try {
                            if(response.isSuccessful()){
                                String message=response.body().string();
                                JSONObject result=new JSONObject(message);
                                String jsonResult=result.getString("Response");
                                Log.d(TAG,jsonResult);
                                if(jsonResult.equals("Update Succesfully")){
                                    JSONArray items = result.getJSONArray("User");
                                    JSONObject user=items.getJSONObject(0);
                                    mail=user.getString("email");
                                    task.snackbar(cl,"Update Success email"+mail);
                                    database.storeEmail(mail);
                                    Home_Page.this.runOnUiThread(new Runnable() {
                                        @Override
                                        public void run() {
                                            user_profile=database.getUserData();
                                            email.setText(mail);
                                        }
                                    });
                                }else if(jsonResult.equals("Update Fail")){
                                    task.snackbar(cl,"Update Fail");
                                }else if(jsonResult.equals("Something went wrong!")){
                                    task.snackbar(cl,"Something went wrong!");
                                }else if(jsonResult.equals("Token Invalid")){
                                    task.snackbar(cl,"Token Invalid");
                                }else if(jsonResult.equals("Email Invalid")){
                                    task.snackbar(cl,"Email Invalid");
                                }
                            }
                        } catch (JSONException e) {
                            e.printStackTrace();
                        }
                    }
                });
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return null;
        }
    }

    @SuppressLint("StaticFieldLeak")
    private class At2 extends AsyncTask<Void,Void,String> {
        @Override
        protected String doInBackground(Void... voids) {
            email2=database.getUserData();
            String url="http://172.20.10.2/user_profile/name";
            String[] data=new String[3];
            String[] data_type=new String[3];
            data_type[0]="name";
            data_type[1]="email";
            data_type[2]="token";
            data[0]=name.getText().toString();
            data[1]=email2.email;
            data[2]=token.getText().toString();
            try {
                String json=task.model(data,data_type);
                Request request=task.post(url,json);
                okhttp.newCall(request).enqueue(new Callback() {
                    @Override
                    public void onFailure(@NonNull Call call, @NonNull IOException e) {
                    }

                    @Override
                    public void onResponse(@NonNull Call call, @NonNull Response response) throws IOException {
                        try {
                            if(response.isSuccessful()){
                                String message=response.body().string();
                                JSONObject result=new JSONObject(message);
                                String jsonResult=result.getString("Response");
                                Log.d(TAG,jsonResult);
                                if(jsonResult.equals("Update Succesfully")){
                                    JSONArray items = result.getJSONArray("User");
                                    JSONObject user=items.getJSONObject(0);
                                    mail=user.getString("name");
                                    task.snackbar(cl,"Update Success name "+mail);
                                    database.storeName(mail);
                                    Home_Page.this.runOnUiThread(new Runnable() {
                                        @Override
                                        public void run() {
                                            user_profile=database.getUserData();
                                            name.setText(mail);
                                        }
                                    });
                                }else if(jsonResult.equals("Update Fail")){
                                    task.snackbar(cl,"Update Fail");
                                }else if(jsonResult.equals("Something went wrong!")){
                                    task.snackbar(cl,"Something went wrong!");
                                }else if(jsonResult.equals("Token Invalid")){
                                    task.snackbar(cl,"Token Invalid");
                                }else if(jsonResult.equals("Email Invalid")){
                                    task.snackbar(cl,"Email Invalid");
                                }
                            }
                        } catch (JSONException e) {
                            e.printStackTrace();
                        }
                    }
                });
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return null;
        }
    }

    @SuppressLint("StaticFieldLeak")
    private class At3 extends AsyncTask<Void,Void,String> {
        @Override
        protected String doInBackground(Void... voids) {
            email2=database.getUserData();
            String url="http://172.20.10.2/user_profile/password";
            String[] data=new String[4];
            String[] data_type=new String[4];
            data_type[0]="password";
            data_type[1]="email";
            data_type[2]="token";
            data_type[3]="password_check";
            data[0]=editText8.getText().toString();
            data[1]=email2.email;
            data[2]=token.getText().toString();
            data[3]=editText7.getText().toString();
            try {
                String json=task.model(data,data_type);
                Request request=task.post(url,json);
                okhttp.newCall(request).enqueue(new Callback() {
                    @Override
                    public void onFailure(@NonNull Call call, @NonNull IOException e) {
                    }

                    @Override
                    public void onResponse(@NonNull Call call, @NonNull Response response) throws IOException {
                        try {
                            if(response.isSuccessful()){
                                String message=response.body().string();
                                JSONObject result=new JSONObject(message);
                                String jsonResult=result.getString("Response");
                                Log.d(TAG,jsonResult);
                                if(jsonResult.equals("Update Succesfully")){
                                    task.snackbar(cl,"Update Success password");
                                    Home_Page.this.runOnUiThread(new Runnable() {
                                        @Override
                                        public void run() {
                                            editText7.setText("");
                                            editText8.setText("");
                                            editText9.setText("");
                                        }
                                    });
                                }else if(jsonResult.equals("Update Fail")){
                                    task.snackbar(cl,"Update Fail");
                                }else if(jsonResult.equals("Something went wrong!")){
                                    task.snackbar(cl,"Something went wrong!");
                                }else if(jsonResult.equals("Token Invalid")){
                                    task.snackbar(cl,"Token Invalid");
                                }else if(jsonResult.equals("Email Invalid")){
                                    task.snackbar(cl,"Email Invalid");
                                }else if(jsonResult.equals("Password Incorrect")){
                                    task.snackbar(cl,"Password Incorrect");
                                }
                            }
                        } catch (JSONException e) {
                            e.printStackTrace();
                        }
                    }
                });
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return null;
        }
    }
}
