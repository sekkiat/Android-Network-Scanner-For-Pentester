package com.example.romeovava.networkscanner;

import android.annotation.SuppressLint;
import android.content.Context;
import android.content.Intent;
import android.graphics.Color;
import android.os.AsyncTask;
import android.os.Bundle;
import android.support.annotation.NonNull;
import android.support.constraint.ConstraintLayout;
import android.support.design.widget.Snackbar;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.text.Editable;
import android.text.TextWatcher;
import android.util.Log;
import android.view.View;
import android.view.inputmethod.InputMethodManager;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.LinearLayout;

import org.json.JSONException;
import org.json.JSONObject;

import java.io.IOException;

import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.MediaType;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

/**
 * Created by Romeo VaVa on 28/1/2018.
 */

public class Register_Token_Comfirm extends AppCompatActivity implements View.OnClickListener, TextWatcher {
    private static final String TAG = "MainActivity" ;
    LinearLayout linearlayout;
    private OkHttpClient okhttp=new OkHttpClient();
    public static final MediaType JSON=MediaType.parse("application/json;charset=utf-8");
    EditText editText,editText2,editText3,editText4;
    ConstraintLayout cl;
    Task task=new Task();
    String email,code;
    View view;
    OkHttpClient client=new OkHttpClient();
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.register_token_comfirm);
        Toolbar toolbar=findViewById(R.id.toolbar);
        linearlayout=findViewById(R.id.linearLayout);
        setSupportActionBar(toolbar);
        cl=findViewById(R.id.layout);
        editText=findViewById(R.id.editText);
        editText2=findViewById(R.id.editText2);
        editText3=findViewById(R.id.editText3);
        editText4=findViewById(R.id.editText4);
        editText.requestFocus();
        view=this.getCurrentFocus();
        editText.addTextChangedListener(this);
        editText2.addTextChangedListener(this);
        editText3.addTextChangedListener(this);
        editText4.addTextChangedListener(this);
        ImageButton comfirm=findViewById(R.id.comfirm);
        comfirm.setOnClickListener(this);
        if(getSupportActionBar()!=null){
            getSupportActionBar().setTitle("");
        getSupportActionBar().setDisplayShowHomeEnabled(true);
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        }
    }


    @Override
    public void onClick(View view) {
        switch (view.getId()){
            case R.id.comfirm:
                if(String.valueOf(editText.getText()).equals("")|| String.valueOf(editText2.getText()).equals("") ||
                        String.valueOf(editText3.getText()).equals("") || String.valueOf(editText4.getText()).equals("")){
                    task.snackbar(cl,"Please fill in all the code");
                }else{
                    at at=new at();
                    at.execute();
                    }
                }
        }

    @Override
    public boolean onSupportNavigateUp() {
        onBackPressed();
        return true;
    }

    @Override
    public void onBackPressed() {
        super.onBackPressed();
        overridePendingTransition(R.anim.right_back, R.anim.left_back);
    }

    @Override
    public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2){
    }

    @Override
    public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {
        if(!(i2==0)){
            if(getCurrentFocus()==editText){
                editText2.requestFocus();
            }else if(getCurrentFocus()==editText2){
                editText3.requestFocus();
            }else if(getCurrentFocus()==editText3){
                editText4.requestFocus();
            }else{
                editText.setFocusable(false);
                editText.setFocusableInTouchMode(true);
                editText2.setFocusable(false);
                editText2.setFocusableInTouchMode(true);
                editText3.setFocusable(false);
                editText3.setFocusableInTouchMode(true);
                editText4.setFocusable(false);
                editText4.setFocusableInTouchMode(true);
                editText4.setFocusable(false);
                editText4.setFocusableInTouchMode(true);
                if(view!=null){
                    //inputmethodmanager - manage between all other part
                    //getSystemService - return a system level service
                    //Context.Input_Method_Service - accessing input method from the inputmethodmanager
                    InputMethodManager imm= (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
                    if (imm != null) {
                        //hideSoftInputWindow - request to hide the soft input
                        //getWindowToken - retrieve a identify token for the window
                        //0 - hidden
                        imm.hideSoftInputFromWindow(view.getWindowToken(),0);
                    }
                }
            }
        }
    }

    @Override
    public void afterTextChanged(Editable editable) {

    }

    @SuppressLint("StaticFieldLeak")
    private class at extends AsyncTask<Void,Void,String>{
        @Override
        protected String doInBackground(Void... voids) {
            String[] data=new String[2];
            String[] data_type=new String[2];
            data_type[0]="email";
            data_type[1]="token";
            String url="http://172.20.10.2/check_register_token";
            email=getIntent().getStringExtra("Email");
            code=String.valueOf(editText.getText())+String.valueOf(editText2.getText())+
                    String.valueOf(editText3.getText())+ String.valueOf(editText4.getText());
            data[0]=email;
            data[1]=code;
            try {
                String json=task.model(data,data_type);
                Request request=task.post(url,json);
                //Using OKHttp to request the data from the server
                okhttp.newCall(request).enqueue(new Callback() {
                    @Override
                    public void onFailure(@NonNull Call call, @NonNull IOException e) {
                        //if fail - show the error message in log
                        String error= e.getMessage();
                        Log.d(TAG,error);
                    }

                    @Override
                    public void onResponse(@NonNull Call call, @NonNull Response response) throws IOException {
                        try {
                            //if response success
                            if(response.isSuccessful()){
                                //take back the response body to string
                                String message=response.body().string();
                                //because the data return is in JSON, therefore we need the JSONObject to read the data
                                JSONObject result=new JSONObject(message);
                                String jsonResult=result.getString("Response");
                                //show the success on the log
                                Log.d(TAG,jsonResult);
                                if(jsonResult.equals("Code Not Match!")){
                                    task.snackbar(cl,"Code Not Match");
                                }else if(jsonResult.equals("User Registered")){
                                    Intent intent=new Intent(Register_Token_Comfirm.this, Register_User.class);
                                    intent.putExtra("email",email);
                                    startActivity(intent);
                                    overridePendingTransition(R.anim.right, R.anim.left);
                                }else{
                                    task.snackbar(cl,"Token Expired");
                                    finish();
                                }
                            }
                        } catch (JSONException e) {
                            e.printStackTrace();
                        }
                    }
                });
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return null;
        }
    }
}













